apply plugin: 'java'
apply plugin: 'idea'

configurations {
    ajc
    aspects
    aspectCompile
    compile {
        extendsFrom aspects
    }
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

dependencies {
    ajc  files('lib/aspectjtools-1.7.4.jar', 'lib/aspectjrt-1.7.4.jar')
    compile fileTree(dir: 'lib', include: ['**/*.jar'])
    runtime fileTree(dir: 'lib', include: ['**/*.jar'])
}

compileJava {
    println "*** compileJava"
    doLast {
        ant.taskdef(
                resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties",
                classpath: configurations.compile.asPath)
        ant.iajc(source: "1.6", target: "1.6",
                destDir: sourceSets.main.output.classesDir.absolutePath,
                maxmem: "512m", fork: "true",
                aspectPath: configurations.aspects.asPath,
                sourceRootCopyFilter: "src/**/*.java",
                classpath: "${configurations.compile.asPath};${configurations.aspectCompile.asPath}" ) {
            sourceroots {
                sourceSets.main.java.srcDirs.each {
                    pathelement(location: it.absolutePath)
                }
            }
        }
    }
}

def defaultCukeArgs = ['--format', 'pretty',
        '--glue', 'gradle/cucumber', 'src/test/resources',
        '--format', 'html:build/reports/cucumber-html-report',
        '--format', 'junit:build/reports/cucumber-junit-report.xml',
        '--format', 'json:build/reports/cucumber-json-report.json']

task cucumber() {
    dependsOn assemble, compileTestJava
    println("All:")
    doLast {
        runTest(defaultCukeArgs)
    }
}

task cucumberws() {
    dependsOn assemble, compileTestJava
    println("WS:")
    doLast {
        runTest(defaultCukeArgs + ['--tags', '@webservice'])
    }
}

task mifosx() {
    dependsOn assemble, compileTestJava
    println("MifosX Demo App Test:")
    doLast {
        runTest(defaultCukeArgs + ['--tags', '@mifosx'])
    }
}

task cucumberui() {
    dependsOn assemble, compileTestJava
    println("UI:")
    doLast {
        runTest(defaultCukeArgs + ['--tags', '@browser'])
    }
}

task cucumberjson() {
    dependsOn assemble, compileTestJava
    println("Json:")
    doLast {
        runTest(defaultCukeArgs + ['--tags', '@json'])
    }
}

def runTest(cukeArgs) {
    println "** Cucumber arguments: " +cukeArgs
    javaexec {
        main = "cucumber.api.cli.Main"
        jvmArgs '-Dorg.apache.cxf.Logger=org.apache.cxf.common.logging.Log4jLogger'
        classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
        args = cukeArgs
    }
}

task createHTMLReport() {
    println "** createHTMLReport: "
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "utils.CustomHTMLReporter"
            classpath = configurations.runtime + sourceSets.main.output + sourceSets.test.output
        }

    }
}

cucumberui.finalizedBy createHTMLReport
cucumberws.finalizedBy createHTMLReport
cucumberjson.finalizedBy createHTMLReport
mifosx.finalizedBy createHTMLReport
cucumber.finalizedBy createHTMLReport

def wsdlList() {
    def globalWeatherWSDL = [name: "globalWeather", url: "http://www.webservicex.com/globalweather.asmx?WSDL"]
    def currencyConvertorWSDL = [name: "currencyConvertor", url: "http://www.webservicex.net/CurrencyConvertor.asmx?WSDL"]
    def periodicTableWSDL = [name: "periodicTable", url: "http://www.webservicex.net/periodictable.asmx?WSDL"]
//    [globalWeatherWSDL, currencyConvertorWSDL, periodicTableWSDL]
    []
}

task buildWSClients() {
    wsdlList().each() {
        eachWSDLHash ->
            def name = eachWSDLHash.name
            def url = eachWSDLHash.url
            println "Creating Java Classes for WSDL: ${name} available at: ${url}"
            doLast {
                javaexec {
                    main = "org.apache.cxf.tools.wsdlto.WSDLToJava"
                    jvmArgs '-Dorg.apache.cxf.Logger=org.apache.cxf.common.logging.Log4jLogger'
                    classpath = configurations.runtime
                    args = ['-validate', '-keep', '-client', '-d', 'src/main/java', '-p',
                            'flows.webserviceClients.' +
                            name,
                            url]
                }
            }
    };
}